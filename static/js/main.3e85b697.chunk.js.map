{"version":3,"sources":["components/DivvyCard.js","components/DivvyContainer.js","components/CtaCard.js","components/CtaContainer.js","components/WeatherCard.js","components/WeatherContainer.js","components/Dashboard.js","components/HomepageLayout.js","App.js","serviceWorker.js","index.js"],"names":["DivvyCard","props","Card","Image","src","wrapped","ui","Content","Meta","Description","getStation","num_bikes_available","num_docks_available","DivvyContainer","stationId","station","state","divvyStation","data","stations","find","station_id","isLoading","fetch","then","response","json","console","log","setState","this","React","Component","CtaCard","size","station_name","eta","second_eta","CtaContainer","cta","prdctdn","WeatherCard","city","temperature","feels_like","humidity","WeatherContainer","weather","name","main","temp","Dashboard","Group","itemsPerRow","class","getWidth","window","Responsive","onlyTablet","minWidth","innerWidth","HomepageHeading","mobile","Container","text","Header","as","content","inverted","style","fontSize","fontWeight","marginBottom","marginTop","DesktopContainer","hideFixedMenu","fixed","showFixedMenu","children","Visibility","once","onBottomPassed","onBottomPassedReverse","Segment","textAlign","minHeight","padding","vertical","MobileContainer","handleSidebarHide","sidebarOpened","handleToggle","Sidebar","Pushable","maxWidth","onlyMobile","Pusher","dimmed","ResponsiveContainer","HomepageLayout","App","className","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3e85b697.chunk.js","sourcesContent":["import React from 'react'\nimport { Card,Image } from 'semantic-ui-react'\n\nconst DivvyCard = (props) => (\n  <Card>\n    <Image src= 'https://d21xlh2maitm24.cloudfront.net/chi/DivvyLogo_p_v2.svg?mtime=20170608140727' wrapped ui={false} />\n    <Card.Content>\n      <Card.Meta>\n        Station: Clark & Elm \n      </Card.Meta>\n      <br></br>\n      <Card.Description>\n      <h4>Bikes Available: {props.getStation('183').num_bikes_available}</h4>\n      <h4>Docks Available: {props.getStation('183').num_docks_available}</h4>\n      </Card.Description>\n      <br></br>\n      <br></br>\n      <br></br>\n      <br></br>\n      <br></br>\n    </Card.Content>\n  </Card>\n)\n\nexport default DivvyCard","import React from \"react\";\nimport DivvyCard from \"./DivvyCard\"\n\nconst URL = \"https://gbfs.divvybikes.com/gbfs/en/station_status.json\";\n\nclass DivvyContainer extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      divvyStation: [],\n      isLoading: true\n    };\n  }\n\n  componentDidMount() {\n    fetch(URL)\n      .then(response => response.json())\n      .then(data => {\n        console.log(data);\n        this.setState({\n          divvyStation: data,\n          isLoading: false\n        });\n      });\n  }\n\n  getStation = (stationId) => {\n    let station = this.state.divvyStation;\n    // console.log({ station });\n    // let myStation = station.data.stations.find(dock => dock.station_id === 182);\n    return station?.data?.stations?.find(station => station.station_id === stationId)\n  };\n\n  render() {\n\n    // console.log(\"DEBUG RENDER\", this.state.divvyStation)\n    let renderContent;\n    if (this.state.isLoading) {\n      renderContent = <div> Is Loading... </div>;   \n    } else {    \n      renderContent = (\n        <div>\n          <DivvyCard getStation={this.getStation}/>\n        </div>\n      );\n    }\n\n    return renderContent;\n  }\n}\n\nexport default DivvyContainer;\n","import React from 'react'\nimport { Card, Image } from 'semantic-ui-react'\n\n// 'https://www.transitchicago.com/cms/images/layout/logo.png'\n\nconst CtaCard = (props) => (\n  <Card>\n    <Image src= 'https://www.transitchicago.com/assets/1/6/pageheader_ctatrademarks.png' size=\"large\"  wrapped ui={false} />\n    <Card.Content>\n      <Card.Meta>\n      Stop: {props.station_name}  \n      </Card.Meta> \n      <br></br>\n        <Card.Description>\n        <h4> Next Bus In: </h4>\n       <h5>{props.eta} minutes </h5>\n      <h5> {props.second_eta} minutes </h5>\n        </Card.Description>\n        <br></br>\n        <br></br>\n        \n    </Card.Content>\n  </Card>\n)\n\nexport default CtaCard ","import React from \"react\"\nimport CtaCard from \"./CtaCard\";\n\n// const URL = 'http://ctabustracker.com/bustime/api/v2/getpredictions?key=JTDi73TetKb86BTRqBCaxLTDW&rt=70&stpid=2034&format=json'\n\nclass CtaContainer extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      cta: [],\n      isLoading: false\n    };\n  }\n  \n  componentDidMount() {\n    fetch('/bustime/api/v2/getpredictions?key=JTDi73TetKb86BTRqBCaxLTDW&rt=70&stpid=2034&format=json')\n      .then(response => response.json())\n      .then(data => {\n        console.log(data);\n        this.setState({\n          cta: data,\n          station_name: data['bustime-response']['prd']['0'][\"stpnm\"],\n          eta: data['bustime-response']['prd']['0']['prdctdn'],\n          second_eta: data['bustime-response']['prd']['1']['prdctdn'],\n        });\n      });\n  }\n\n  // componentDidMount(){\n  //   let firstAPICall = fetch ('/bustime/api/v2/getpredictions?key=JTDi73TetKb86BTRqBCaxLTDW&rt=70&stpid=2034&format=json')\n  //   let secondAPICall = fetch ('/api/1.0/ttarrivals.aspx?key=642632906178436fa3f103470c610444&mapid=40630&outputType=JSON')\n\n  //   Promise.all( [firstAPICall, secondAPICall])\n  //     .then(values => Promise.all(values.map(value => value.json())))\n  //     .then(finalVals => {\n  //       let firstAPIResp = finalVals[0];\n  //       let secondAPIResp = finalVals[1]\n  //       console.log(firstAPIResp,secondAPIResp)\n  //     })\n\n  // }\n\n  // getNextTrain = (run) => {\n  //   let train = this.state.cta\n  //   console.log({train})\n  //   // let myTrain = train.ctatt.eta.trDr\n  //   // console.log(myTrain)  \n  //   return train?.ctatt?.eta?.find(train => train.rn === run)\n  // }\n\n  // getHp = stats => stats.filter(stat => stat.name === 'hp')[0].value\n\n  // getRun = etas => etas.filter(eta => eta.rn === \"815\")[0].staNm\n\n  render() {\n    \n    console.log(this.state.prdctdn)\n    let renderContent;\n    if (this.state.isLoading) {\n      renderContent = <div> Is Loading... </div>;   \n    } else {    \n      renderContent = (\n        <div>\n          <CtaCard\n          cta = {this.state.cta}\n          eta = {this.state.eta}\n          second_eta= {this.state.second_eta}\n          station_name = {this.state.station_name}\n          />\n        </div>\n      );\n    }\n\n    return renderContent;\n  }\n}\n\nexport default CtaContainer ","import React from 'react'\nimport { Card, Image } from 'semantic-ui-react'\n\nconst WeatherCard = (props) => (\n    \n  <Card>\n    <Image src= 'https://images.pexels.com/photos/1209982/pexels-photo-1209982.jpeg?auto=compress&cs=tinysrgb&dpr=2&w=500' wrapped ui={false} />\n    <Card.Content>\n      <Card.Meta>\n      City: {props.city}\n      </Card.Meta>\n      <br></br>\n      <Card.Description>\n       <h4>Temperature:  {props.temperature}°</h4>\n      </Card.Description>\n      <br></br>\n      <Card.Description>\n       <h4>Feels Like:  {props.feels_like}°</h4>\n      </Card.Description>\n      <br></br>\n      <Card.Description>\n       <h4>Humidity:  {props.humidity}%</h4>\n      </Card.Description>\n    </Card.Content>\n  </Card>\n)\n\nexport default WeatherCard","import React from \"react\";\nimport WeatherCard from \"./WeatherCard\"\n\nconst URL = \"http://api.openweathermap.org/data/2.5/weather?q=Chicago&APPID=a6e35c880dc001c17f77b139faa03bd8&units=imperial\"\n\n\nclass WeatherContainer extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      weather: [],\n      isLoading: false\n    };\n  }\n\n  componentDidMount() {\n    fetch(URL)\n      .then(response => response.json())\n      .then(data => {\n        console.log(data);\n        this.setState({\n          weather: data,\n          city: data.name, \n          temperature: data.main.temp, \n          feels_like: data.main.feels_like,\n          humidity: data.main.humidity, \n          isLoading: false\n        });\n      });\n  }\n\n\n    render() {\n      // console.log(\"DEBUG RENDER\", this.state.divvyStation)\n      let renderContent;\n      if (this.state.isLoading) {\n        renderContent = <div> Is Loading... </div>;   \n      } else {    \n        renderContent = (\n          <div>\n            <WeatherCard \n            city={this.state.city}\n            temperature={this.state.temperature}\n            feels_like={this.state.feels_like}\n            humidity ={this.state.humidity}\n            /> \n          </div>\n        );\n      }\n      return renderContent;\n    }\n}\n\nexport default WeatherContainer \n","import React from 'react';\nimport DivvyContainer from './DivvyContainer';\nimport CtaContainer from './CtaContainer';\nimport {Card} from \"semantic-ui-react\"\nimport WeatherContainer from \"./WeatherContainer\"\n\n\nclass Dashboard extends React.Component {\n    render(){\n        return(\n        <Card.Group itemsPerRow={3}> \n            <div class=\"ui three centered cards\">\n                \n                <Card>\n                    <DivvyContainer\n                    getStation={this.getStation}/>\n                </Card>\n\n                <Card>\n                  <CtaContainer/>\n                </Card>\n\n                <Card>\n                  <WeatherContainer/>\n                </Card> \n\n            </div>\n        </Card.Group>\n        )\n    }\n\n}\n\nexport default Dashboard ","import PropTypes from 'prop-types'\nimport React, { Component } from 'react'\nimport Dashboard from './Dashboard'\nimport {\n  Button,\n  Container,\n  Header,\n  Icon,\n  Menu,\n  Responsive,\n  Segment,\n  Sidebar,\n  Visibility,\n} from 'semantic-ui-react'\n\n// Heads up!\n// We using React Static to prerender our docs with server side rendering, this is a quite simple solution.\n// For more advanced usage please check Responsive docs under the \"Usage\" section.\nconst getWidth = () => {\n  const isSSR = typeof window === 'undefined'\n\n  return isSSR ? Responsive.onlyTablet.minWidth : window.innerWidth\n}\n\n/* eslint-disable react/no-multi-comp */\n/* Heads up! HomepageHeading uses inline styling, however it's not the best practice. Use CSS or styled components for\n * such things.\n */\nconst HomepageHeading = ({ mobile }) => (\n  <Container text>\n    <Header\n      as='h1'\n      content='MorningGo'\n      inverted\n      style={{\n        fontSize: mobile ? '2em' : '4em',\n        fontWeight: 'normal',\n        marginBottom: 5,\n        marginTop: mobile ? '.5em' : '3em',\n      }}\n    />\n    <Header\n      as='h4'\n      content='Have a Fantastic Morning.'\n      inverted\n      style={{\n        fontSize: mobile ? '1.5em' : '1.7em',\n        fontWeight: 'normal',\n        marginTop: mobile ? '0.5em' : '1.5em',\n      }}\n    />\n    <br></br>\n    <br></br>\n    <Dashboard/>\n\n  </Container>\n)\n\nHomepageHeading.propTypes = {\n  mobile: PropTypes.bool,\n}\n\n/* Heads up!\n * Neither Semantic UI nor Semantic UI React offer a responsive navbar, however, it can be implemented easily.\n * It can be more complicated, but you can create really flexible markup.\n */\nclass DesktopContainer extends Component {\n  state = {}\n\n  hideFixedMenu = () => this.setState({ fixed: false })\n  showFixedMenu = () => this.setState({ fixed: true })\n\n  render() {\n    const { children } = this.props\n    const { fixed } = this.state\n\n    return (\n      <Responsive getWidth={getWidth} minWidth={Responsive.onlyTablet.minWidth}>\n        <Visibility\n          once={false}\n          onBottomPassed={this.showFixedMenu}\n          onBottomPassedReverse={this.hideFixedMenu}\n        >\n          <Segment\n            inverted\n            textAlign='center'\n            style={{ minHeight: 500, padding: '8em 0em' }}\n            vertical\n          >\n\n            <HomepageHeading />\n          </Segment>\n        </Visibility>\n\n        {children}\n      </Responsive>\n    )\n  }\n}\n\nDesktopContainer.propTypes = {\n  children: PropTypes.node,\n}\n\nclass MobileContainer extends Component {\n  state = {}\n\n  handleSidebarHide = () => this.setState({ sidebarOpened: false })\n\n  handleToggle = () => this.setState({ sidebarOpened: true })\n\n  render() {\n    const { children } = this.props\n    const { sidebarOpened } = this.state\n\n    return (\n      <Responsive\n        as={Sidebar.Pushable}\n        getWidth={getWidth}\n        maxWidth={Responsive.onlyMobile.maxWidth}\n      >\n    \n        <Sidebar.Pusher dimmed={sidebarOpened}>\n          <Segment\n            inverted\n            textAlign='center'\n            style={{ minHeight: 350, padding: '1em 0em' }}\n            vertical\n          >\n            <Container>\n            </Container>\n            <HomepageHeading mobile />\n          </Segment>\n\n          {children}\n        </Sidebar.Pusher>\n      </Responsive>\n    )\n  }\n}\n\nMobileContainer.propTypes = {\n  children: PropTypes.node,\n}\n\nconst ResponsiveContainer = ({ children }) => (\n  <div>\n    <DesktopContainer>{children}</DesktopContainer>\n    <MobileContainer>{children}</MobileContainer>\n  </div>\n)\n\nResponsiveContainer.propTypes = {\n  children: PropTypes.node,\n}\n\nconst HomepageLayout = () => (\n  <ResponsiveContainer>\n    \n  </ResponsiveContainer>\n)\n\nexport default HomepageLayout","import React from 'react';\nimport HomepageLayout from './components/HomepageLayout'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <HomepageLayout/>  \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'semantic-ui-css/semantic.min.css'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}